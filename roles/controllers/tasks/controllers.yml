---
- name: Apt update
  apt:
    update_cache: yes

- name: Install base packages
  apt:
    name: "{{ packages }}"
    state: present
    force_apt_get: True    
  vars:
    packages:
    - curl
    - git
    - gnupg
    - gnupg2
    - wget
    - telnet
    - unzip
    - wakeonlan
    - htop
    - fail2ban
    - openvpn

- name: Add Hashicorp repository key
  apt_key:
    url: https://apt.releases.hashicorp.com/gpg
    keyring: /usr/share/keyrings/hashicorp-archive-keyring.gpg

- name: Add Hashicorp repository
  apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
    state: present

- name: Install Terraform
  apt:
    name: terraform
    state: present
    update_cache: yes

- name: Check if Docker key exists
  stat:
    path: /etc/apt/keyrings/docker.gpg
  register: docker_key_file

- name: Get architecture using dpkg
  command: dpkg --print-architecture
  register: dpkg_architecture

- name: Add Docker apt repository key
  shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  when: not docker_key_file.stat.exists

- name: Add Docker repository
  lineinfile:
    path: /etc/apt/sources.list.d/docker.list
    create: yes
    line: "deb [arch=\"{{ dpkg_architecture.stdout }}\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_facts['distribution_release'] }} stable"
    state: present
  register: docker_repo_line

- name: Print success message if docker apt line was added
  debug:
    msg: "The Docker repository was added."
  when: docker_repo_line.changed

- name: Install Docker tools
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      - docker-compose
    state: present
    update_cache: yes

- name: Check if Google Kubernetes key exists
  stat:
    path: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
  register: kubernetes_key_file

- name: Add Google kubernetes apt repository key
  shell: curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
  when: not kubernetes_key_file.stat.exists

- name: Add Google Kubernetes repository
  lineinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    create: yes
    line: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
    state: present
  register: google_kubernetes_repo_line

- name: Print success message if k8s apt line was added
  debug:
    msg: "The Google kubernetes repository was added."
  when: google_kubernetes_repo_line.changed

- name: Install Kubectl
  apt:
    name:
      - kubectl
    state: present
    update_cache: yes

- name: Allow binding non-local IPv4
  ansible.posix.sysctl:
    name: net.ipv4.ip_nonlocal_bind
    value: '1'
    sysctl_set: true
    state: present
    reload: true

- name: IP Forwarding for IPv4
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true

- name: Add current user to Docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: Download and install Terragrunt
  get_url:
    url: https://github.com/gruntwork-io/terragrunt/releases/download/v0.48.1/terragrunt_linux_amd64
    dest: /usr/local/bin/terragrunt
    mode: '0755'

- name: Python3 PIP check
  pip:
    name: pip
    state: present
    executable: pip3

- name: Python3 PIP modules
  pip: 
    name:
      - boto3
      - virtualenv
      - botocore
      - PyYAML
      - requests
      - python-dateutil
      - s3transfer
      - urllib3
    state: latest

- name: Check if AWS CLI exists
  stat:
    path: /home/{{ platform_username }}/.aws/config
  register: aws_cli_exists

- name: Download AWS CLI
  get_url:
    url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
    dest: /tmp/awscliv2.zip
  when: not aws_cli_exists.stat.exists    

- name: Unarchive AWS CLI
  unarchive:
    src: /tmp/awscliv2.zip
    dest: /tmp
    remote_src: yes
  when: not aws_cli_exists.stat.exists    

- name: Install AWS CLI
  command: /tmp/aws/install --update
  when: not aws_cli_exists.stat.exists  

- name: Clean up AWS CLI installation files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/aws
    - /tmp/awscliv2.zip

# AWS CLI and credentials
#
- name: Create the AWS config directories
  tags: 'aws-cli'
  file: >
    path="/home/{{ platform_username }}/.aws"
    state=directory
    owner="{{ platform_username }}"
    group="{{ platform_username }}"
    mode=0700
  when: not aws_cli_exists.stat.exists

- name: Create AWS CLI configs
  tags: 'aws-cli'
  template: >
    src=aws_cli_config.j2
    dest="/home/{{ platform_username }}/.aws/config"
    owner="{{ platform_username }}"
    group="{{ platform_username }}"
    mode=0655
  when: not aws_cli_exists.stat.exists    

- name: Copy AWS CLI credentials
  tags: 'aws-cli'
  template: >
    src=aws_cli_credentials.j2
    dest="/home/{{ platform_username }}/.aws/credentials"
    owner="{{ platform_username }}"
    group="{{ platform_username }}"
    mode=0655
  no_log: true
  when: not aws_cli_exists.stat.exists  

# DNS entries
#
- name: Create or update Route53 for vault
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-vault.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ controller_ip }}"
    wait: true
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == true

- name: Create or update Route53 for vault inside aws env
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-vault.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ controller_ip }}"
    wait: true
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == false

- name: Create or update Route53 for controller
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-controller.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ controller_ip }}"
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
    wait: true    
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == true

- name: Create or update Route53 for controller inside aws env
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-controller.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ controller_ip }}"
    wait: true
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == false

- name: Create or update Route53 for controller-bkp
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-controller-bkp.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ controller_bkp_ip }}"
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == true

- name: Create or update Route53 for controller-bkp inside aws env
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-controller-bkp.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ controller_bkp_ip }}"
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == false
    
- name: Create or update Route53 for k8s cp1
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-cp1.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ cp1_ip }}"
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == true

- name: Create or update Route53 for k8s cp2
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-cp2.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ cp2_ip }}"
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == true
    
- name: Create or update Route53 for k8s node1
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-k8s-node1.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ k8s_node1_ip }}"
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == true

- name: Create or update Route53 for k8s node2
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-k8s-node2.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ k8s_node2_ip }}"
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == true    

- name: Create or update Route53 for k8s node3
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-k8s-node3.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ k8s_node3_ip }}"
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == true

- name: Create or update Route53 for k8s node4
  amazon.aws.route53:
    state: present
    overwrite: true
    zone: "{{ domain_name }}"
    record: "{{ platform_name }}-k8s-node4.{{ domain_name }}"
    type: A
    ttl: 7200
    value:
      - "{{ k8s_node4_ip }}"
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
  when:
    - platform_dns_hosting == "route53"
    - platform_on_prem == true    

# Keepalived and HAPROXY
#
- name: Keepalived check K8s api server script
  template: >
    src=keepalived_check_api_server.j2
    dest="/etc/keepalived/check_apiserver.sh"
    owner=root
    group=root
    mode=a+x
  when:
    - platform_on_prem == true

- name: Keepalived status capture script
  template: >
    src=keepalived_status_capture.j2
    dest="/etc/keepalived/status_capture.sh"
    owner=root
    group=root
    mode=a+x
  when:
    - platform_on_prem == true

- name: Keepalived config
  template: >
    src=keepalived_conf.j2
    dest="/etc/keepalived/keepalived.conf"
    owner=root
    group=root
    mode=a-x
  when:    
    - platform_on_prem == true    

- name: HAPROXY config
  template: >
    src=haproxy_cfg.j2
    dest="/etc/haproxy/haproxy.cfg"
    owner=root
    group=root
    mode=a-x
  when:    
    - platform_on_prem == true    

- name: Start Keepalived
  ansible.builtin.systemd:
    daemon_reload: true
    state: started
    name: keepalived
  when:    
    - platform_on_prem == true    

- name: Sleep for 3 seconds and continue
  ansible.builtin.wait_for:
    timeout: 3
  when:    
    - platform_on_prem == true

- name: Start HAPROXY
  ansible.builtin.systemd:
    daemon_reload: true
    state: started
    name: haproxy
  when:    
    - platform_on_prem == true    

# Controllers NFS based storage
#

- name: Check if nfs storage is present
  stat:
    path: "/home/{{ platform_username }}/nfs-storage"
  register: nfs_storage

- name: Create main storage folder
  ansible.builtin.file:
    path: "/home/{{ platform_username }}/nfs-storage"
    state: directory
    owner: "{{ platform_username }}"
    group: "{{ platform_username }}"
    mode: '0755'
    recurse: yes
  when: not nfs_storage.stat.exists

- name: Mount nfs volume
  ansible.posix.mount:
    boot: true
    fstype: nfs
    state: mounted
    src: "{{ nfs_host }}:volume1/controllers"
    path: "/home/{{ platform_username }}/nfs-storage"
    opts: rw,sync,hard

- name: Check if controller storage is present
  stat:
    path: "/home/{{ platform_username }}/nfs-storage/controller"
  register: controller_storage

- name: Permissions correction
  ansible.builtin.file:
    path: "/home/{{ platform_username }}/nfs-storage"
    state: directory
    owner: "{{ platform_username }}"
    group: "{{ platform_username }}"
    mode: '0755'
  when: not controller_storage.stat.exists

- name: Create folders structure required for docker compose
  file:
    path: "{{ item }}"
    state: directory
    mode: '0655'
    owner: "{{ platform_username }}" 
    group: "{{ platform_username }}"
    recurse: yes    
  loop:
    - "/home/{{ platform_username }}/nfs-storage"
    - "/home/{{ platform_username }}/nfs-storage/controller"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp"
    - "/home/{{ platform_username }}/nfs-storage/controller/docker-registry"
    - "/home/{{ platform_username }}/nfs-storage/controller/vault"
    - "/home/{{ platform_username }}/nfs-storage/controller/vault/data"
    - "/home/{{ platform_username }}/nfs-storage/controller/vault/config"
    - "/home/{{ platform_username }}/nfs-storage/controller/vault/policies"
    - "/home/{{ platform_username }}/nfs-storage/controller/vault/logs"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/docker-registry"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/vault"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/vault/data"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/vault/config"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/vault/policies"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/vault/logs"
    - "/home/{{ platform_username }}/nfs-storage/controller/nginx"
    - "/home/{{ platform_username }}/nfs-storage/controller/nginx/cache"
    - "/home/{{ platform_username }}/nfs-storage/controller/nginx/letsencrypt"
    - "/home/{{ platform_username }}/nfs-storage/controller/nginx/conf.d"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/nginx"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/nginx/letsencrypt"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/nginx/cache"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/nginx/letsencrypt"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/nginx/conf.d"
  when: not controller_storage.stat.exists    

- name: Create nginx logs folders
  file:
    path: "{{ item }}"
    state: directory
    mode: '0777'
    owner: "{{ platform_username }}" 
    group: "{{ platform_username }}"
    recurse: yes
  loop:
    - "/home/{{ platform_username }}/nfs-storage/controller/nginx/logs"
    - "/home/{{ platform_username }}/nfs-storage/controller/nginx/logs/nginx"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/nginx/logs"
    - "/home/{{ platform_username }}/nfs-storage/controller-bkp/nginx/logs/nginx"
  when: not controller_storage.stat.exists    

# NGINX
#
# DISABLED due to issues with interactive checks required by letsencrypt container
#- name: Run docker container to create letsencrypt certificates
#  docker_container:
#    name: certbot-route53
#    image: certbot/dns-route53
#    state: started
#    command: certonly -d "{{ domain_name }}" -d "*.{{ domain_name }}" -m "{{ platform_email_contact }}" --agree-tos --server https://acme-v02.api.letsencrypt.org/directory
#    # command: renew --agree-tos --server https://acme-v02.api.letsencrypt.org/directory
#    env:
#      AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
#      AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
#    volumes:
#      - "/home/{{ platform_username }}/nfs-storage/controller/nginx/letsencrypt:/etc/letsencrypt"
#      - "/home/{{ platform_username }}/nfs-storage/controller/nginx/letsencrypt:/var/lib/letsencrypt"
#      - "/home/{{ platform_username }}/nfs-storage/controller/nginx/letsencrypt/logs:/var/log/letsencrypt"
#    detach: false
#    interactive: true
#    tty: true
#    stop_timeout: 45
#  register: certbot_output
#  when: 
#    - "not 'controller-bkp' in inventory_hostname"
#    - platform_on_prem == true
  
- name: Remove certbot container
  docker_container:
    name: certbot-route53
    state: absent
  when: 
    - "not 'controller-bkp' in inventory_hostname"
    - platform_on_prem == true

- name: Check if dhparam file for nginx exists for controller
  stat:
    path: "/home/{{ platform_username }}/nfs-storage/controller/nginx/dhparam.pem"
  register: dhparam_controller

- name: Check if dhparam file for nginx exists for bkp controller
  stat: 
    path: "/home/{{ platform_username }}/nfs-storage/controller-bkp/nginx/dhparam.pem"
  register: dhparam_controller_bkp

- name: Generate dhparam for nginx on controller
  command: "openssl dhparam -out /home/{{ platform_username }}/nfs-storage/controller/nginx/dhparam.pem 4096"
  when: dhparam_controller.stat.exists == False

- name: Generate dhparam for nginx on bkp controller
  command: "openssl dhparam -out /home/{{ platform_username }}/nfs-storage/controller-bkp/nginx/dhparam.pem 4096"
  when: dhparam_controller_bkp.stat.exists == False

- name: Create nginx access rules config
  template: >
    src=nginx_access_rules_conf.j2
    dest="/home/{{ platform_username }}/nfs-storage/{{ inventory_hostname }}/nginx/conf.d/access-rules.conf"
    owner="{{ platform_username }}"
    group=sudo
    mode=0655

- name: Create nginx default config
  template: >
    src=nginx_default_conf.j2
    dest="/home/{{ platform_username }}/nfs-storage/{{ inventory_hostname }}/nginx/conf.d/default.conf"
    owner="{{ platform_username }}"
    group=sudo
    mode=0655

- name: Create nginx domain certs config
  template: >
    src=nginx_domain_certificate.j2
    dest="/home/{{ platform_username }}/nfs-storage/{{ inventory_hostname }}/nginx/conf.d/domain-certificate.conf"
    owner="{{ platform_username }}"
    group=sudo
    mode=0655

- name: Create nginx proxy params
  template: >
    src=nginx_proxy_params.conf.j2
    dest="/home/{{ platform_username }}/nfs-storage/{{ inventory_hostname }}/nginx/conf.d/proxy-params.conf"
    owner="{{ platform_username }}"
    group=sudo
    mode=0655

- name: Create nginx ssl params
  template: >
    src=nginx_ssl_params_conf.j2
    dest="/home/{{ platform_username }}/nfs-storage/{{ inventory_hostname }}/nginx/conf.d/ssl-params.conf"
    owner="{{ platform_username }}"
    group=sudo
    mode=0655

- name: Nginx conf file
  copy:
    src: nginx.conf
    dest: "/home/{{ platform_username }}/nfs-storage/{{ inventory_hostname }}/nginx/nginx.conf"
    mode: '0655'
    owner: "{{ platform_username }}" 
    group: sudo

# VAULT
#
- name: Vault config file controller
  copy:
    src: vault-config.json
    dest: "/home/{{ platform_username }}/nfs-storage/{{ inventory_hostname }}/vault/config/vault-config.json"
    mode: '0655'
    owner: "{{ platform_username }}" 
    group: "{{ platform_username }}"

# KUBESPRAY for on-prem Kubernetes clusters
#

- name: Kubespray ansible.cfg update
  ansible.builtin.blockinfile:
    path: "/home/{{ platform_username }}/kubespray/ansible.cfg"
    marker: "<!-- {mark} SDS BASE ANSIBLE MANAGED BLOCK -->"
    insertafter: ^\[defaults\]$
    content: |
      remote_user={{ platform_username }}
  when:
    - platform_on_prem == true

- name: Kubespray Kubernetes version
  ansible.builtin.lineinfile:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: '^kube_version:+'
    line: "kube_version: {{ kubespray_k8s_version }}"
    backrefs: yes
  when:
    - platform_on_prem == true

- name: Kubespray cluster name
  ansible.builtin.lineinfile:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: '^cluster_name:+'
    line: "cluster_name: {{ platform_name }}.local"
    backrefs: yes
  when:
    - platform_on_prem == true

- name: Kubespray k8s audit
  ansible.builtin.lineinfile:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: '^kubernetes_audit:+'
    line: "kubernetes_audit: true"
    backrefs: yes
  when:
    - platform_on_prem == true

- name: Kubespray k8s secret encryption
  ansible.builtin.lineinfile:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: '^kube_encrypt_secret_data:+'
    line: "kube_encrypt_secret_data: true"
    backrefs: yes
  when:
    - platform_on_prem == true

- name: Kubespray k8s local kubeconfig
  ansible.builtin.lineinfile:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: 'kubeconfig_localhost:+'
    line: "kubeconfig_localhost: true"
    backrefs: yes
  when:
    - platform_on_prem == true

- name: Kubespray k8s local kubectl
  ansible.builtin.lineinfile:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: 'kubectl_localhost:+'
    line: "kubectl_localhost: true"
    backrefs: yes
  when:
    - platform_on_prem == true

- name: Kubespray k8s strict proxy arp
  ansible.builtin.lineinfile:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: '^kube_proxy_strict_arp:+'
    line: "kube_proxy_strict_arp: true"
    backrefs: yes
  when:
    - platform_on_prem == true

- name: Kubespray k8s key IP addresses
  ansible.builtin.lineinfile:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: 'supplementary_addresses_in_ssl_keys:+'
    line: "supplementary_addresses_in_ssl_keys: [10.0.0.1, 10.0.0.2, 10.0.0.3, {{ k8s_virtual_ip }}, {{ cp1_ip }}, {{ cp2_ip }}]"
    backrefs: yes
  when:
    - platform_on_prem == true

- name: Kubespray load balancer IP
  replace:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/all/all.yml"
    regexp: '(# loadbalancer_apiserver:[\s\S]*)#   port: 1234'
    replace: |-
      loadbalancer_apiserver:
        address: {{ k8s_virtual_ip }}
        port: 8443
  when:
    - platform_on_prem == true

- name: Kubespray k8s helm enabled
  ansible.builtin.lineinfile:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/addons.yml"
    regexp: '^helm_enabled:+'
    line: "helm_enabled: true"
    backrefs: yes
  when:
    - platform_on_prem == true

- name: Kubespray K8s Metrics server
  replace:
    path: "/home/{{ platform_username }}/kubespray/inventory/{{ platform_name }}/group_vars/k8s_cluster/addons.yml"
    regexp: '(metrics_server_enabled:[\s\S]*)metrics_server_replicas: 1'
    replace: |-
      metrics_server_enabled: true
      metrics_server_container_port: 10250
      metrics_server_kubelet_insecure_tls: true
      metrics_server_metric_resolution: 15s
      metrics_server_kubelet_preferred_address_types: "InternalIP,ExternalIP,Hostname"
      metrics_server_host_network: false
      metrics_server_replicas: 1
  when:
    - platform_on_prem == true